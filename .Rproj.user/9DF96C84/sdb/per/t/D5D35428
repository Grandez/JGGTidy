{
    "collab_server" : "",
    "contents" : "#' @title  makeCacheMatrix\n#' @description Function to read FARS file.\n#'\n#' This function uses readr and dplyr packages.\n#' It takes a CSV file as an input filename parameter.\n#' If the file does not exist in the working directory, this function stops with an output message that the file does not exist.\n#' If the file exists, this function reads it into dataframe object.\n#' It suppresses messages and progress bar while reading the file.\n#'\n#' @import(tidyr)\n#' @import(dplyr)\n#' @import(maps)\n#' @import(mapdata)\n#'\n#' Print \"fars_read\"\n#' @description Function to load a CSV dataset into a dataframe\n#' @details Dataset must accomplish the FARS structure\n#'\n#' @param filename Path to file\n#'\n#' @return The dataframe generated\n#'         Error if file doesn't exist\n#'\n#' @examples\n#' fars_read('filename')\n#' fars_read('dir1/dir2/filename')\n#'\n#'\n\n#'\n#' @description\n#'     1.- Load Create an object which store a matrix and its inverse\n#'\n#' @author Javier Gonzalez <javier.gonzalez.grandez@gmail.com>\n#'\n#' @method set(x) Default method. create a makeCacheMatrix with\n#'                the matrix passed as argument\n#' @method get    Returns the matrix\n#' @method setInverse(y) Store the inverse of matrix\n#' @method getInverse()  Returns the inverse of matrix x\n#'\n#' @note\n#'         We don't chek if matrix is squared\n#'         neither invertible\n#' @example\n#'\n#'         m1 = matrix(c(1,2,-1,2, 2,2,-1,1, -1,-1,1,-1, 2,1,-1,2), nrow=4, ncol=4, byrow=T)\n#'         cm = makeCacheMatrix(m1)\n#'\n#'\n#'\n#'\n\nDEFAULT_FILE = \"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip\"\n\ntidyFile <- function(fileName = NULL) {\n  df <- loadRawData(fileName)\n  df <- makeTidyData(df)\n  return (df)\n}\n\nloadRawData <- function(fileName = NULL) {\n  nDirs = 0\n\n#  browser()\n\n    wrk = loadFile(fileName)\n\n  #################################################\n  # Process columns to select\n  #################################################\n\n  # Load file with all column names\n  tmp <- getDataframe(wrk, \"features.txt\")\n\n  # Select the second column (names)\n  allCols <- as.vector(tmp[,2])\n  colClasses = rep(\"NULL\", nrow(tmp))\n\n  # Select all columns related to means and std\n  colClasses[grep(\"(t)(Body|Gravity)Acc-(mean|std)\\\\(\\\\)-[XYZ]$\",allCols)] <- \"numeric\"\n\n  # Select columns with type not equal NULL\n  colNames <- allCols[!(colClasses == \"NULL\")]\n\n  # Process directories into zip file: train, test, val, ...\n  for (dir in getDirectories(wrk, 1)) {\n    dirDf <- processDirectory(wrk, dir, colClasses, colNames)\n    df = if (nDirs > 0) rbind(df, dirDf) else dirDf\n    nDirs = nDirs + 1\n  }\n\n  # Translate activity into a factor\n  fact = getDataframe(wrk,\"activity_labels.txt\")\n  df$activity = fact[df$activity,2]\n  df$activity <- as.factor(df$activity)\n  df$subject  <- as.factor(df$subject)\n  unlink(wrk)\n\n  return (df)\n}\n\n#\n#' @title  processDirectory\n#' @description\n#'    Zip file has several folders. Basically: train and test\n#'    but is possible file change including new sets, by example, validators sets\n#'    Each folder has:\n#'       A) The code of subjects\n#'       B) The code of activity\n#'       C) The observations\n#'\n#'   Their relationship is:\n#'\n#'   +--------+  1    1  +---------+  1    1  +---------+\n#'   | X_data | <------> | subject | <------> |    Y    |\n#'   +--------+ By row   +--------+   By row  +---------+\n#'\n#' @param zipFile the zipped file\n#' @param the name of folder (is used to discover their files)\n#' @param classes Vector with the columns to retrieve\n#' @param Vector with the names of columns selected\n#'\n#' @return A data frame like\n#'\n#'   +---------+----------+-----------------------------+\n#'   | subject | activity | vector of selected columns  |\n#'   | subject | activity | vector of selected columns  |\n#'   |  ...    |    ...   |          ....               |\n#'   +---------+----------+-----------------------------+\n#'\n#\nprocessDirectory <- function (zipFile, directory, classes, colNames) {\n  df.obs <- getDataframe(zipFile, sprintf(\"%s/X_%s.txt\", directory, directory), colNames, classes)\n  df.id  <- getDataframe(zipFile, sprintf(\"%s/subject_%s.txt\", directory, directory), \"subject\")\n  df.act <- getDataframe(zipFile, sprintf(\"%s/y_%s.txt\", directory, directory), \"activity\")\n  return (cbind(df.id, df.act, df.obs))\n}\n\n#\n#' @title  loadFile\n#' @description\n#'    load in memory the file selected.\n#'    By default use the file set in DEFAULT_FILE\n#'\n#'    If file starts with \"http\" unload the file from Internet\n#'    else assumes file is in local server\n#'\n#'    @param fileName String with the file name\n#'\n#'    @return An object file pointing to zipped file\n#\nloadFile <- function (fileName) {\n\n  if (is.null(fileName)) {\n    tmp = tempfile()\n    download.file(DEFAULT_FILE, tmp)\n    return (tmp)\n  }\n\n  if (length(grep(\"^http\", fileName, ignore.case)) > 0) {\n    tmp = tempfile()\n    download.file(fileName, tmp)\n    return (tmp)\n  }\n\n  if (!file.exists(fileName)) {\n    stop(\"File \" + fileName + \" does not exist\")\n  }\n\n  return (fileName)\n}\n\n#\n#' @title  getDataFrame\n#' @description\n#'    Load a file from zipped file into a data frame\n#'\n#'    @param zipFile the zipped file object\n#'    @param fileName Fullname of file to read\n#'    @param colNames Vector of names for the columns. By default none\n#'    @param colClasses Vector of columns to retrieve. By default ALL\n#'\n#'    @return The data frame\n#\n\ngetDataframe <- function(zipFile, fileName, colNames=NULL, colClasses=NA) {\n  tmp <- unzip(zipFile, exdir=tempdir(), paste(\"UCI HAR Dataset\", fileName, sep=\"/\"))\n  df <- read.table(tmp, header=F, colClasses = colClasses)\n  if (!is.null(colNames)) colnames(df) = colNames\n  unlink(tmp)\n  return (df)\n}\n\n#\n#' @title  getDirectories\n#' @description\n#'    Get the folders inside a zip file\n#'\n#'    @param zipFile the zipped file object\n#'    @param level Depth of zipped tree starting by 1 (Inside root)\n#'\n#'    @return Vector of directories\n#\n\ngetDirectories <- function (zipFile, level = 1) {\n   n = level + 1\n   lst = unzip(zipFile, list=T)\n\n   lstFiles = str_split(lst[,1], \"/\")\n   dirs = c()\n   for (t in lstFiles) {\n     if (length(t) > n) {\n        dirs <- c(dirs, t[n])\n     }\n   }\n\n   return (unique(dirs))\n}\n\n#\n#' @title  makeTidyData\n#' @description\n#'    Make data tidy\n#'    Split data into:\n#'    Subject\n#'    Activity\n#'    Object   : The subject (Body) or the artifact (Gravity)\n#'    Measure  : Median or Standard deviation\n#'    X,Y,Z    : each coordinate\n#'\n#'    @param df messy data frame\n#'\n#'    @return tidy data\n#\n\nmakeTidyData <- function(df) {\n\n  left <- df[,1:2]\n  left$Object <- \"Body\"\n\n  dt <- as.data.table(df)\n  aux1 <- subset(dt, select = grep(\"tBodyAcc\", names(dt)))\n  names(aux1) <- gsub(\".+(mean|std).+([XYZ]$)\", \"\\\\1_\\\\2\",names(aux1))\n\n  aux11 <- subset(aux1, select = grep(\"mean\", names(aux1)))\n  names(aux11) <- c(\"X\",\"Y\",\"Z\")\n  left$Measure<-\"mean\"\n  aux11 <- cbind(left, aux11)\n\n  aux12 <- subset(aux1, select = grep(\"std\", names(aux1)))\n  names(aux12) <- c(\"X\",\"Y\",\"Z\")\n  left$Measure<-\"std\"\n  aux12 <- cbind(left, aux12)\n\n\n  left$Object <- \"Gravity\"\n  aux2 <- subset(dt, select = grep(\"tGravityAcc\", names(dt)))\n  names(aux2) <- gsub(\".+(mean|std).+([XYZ]$)\", \"\\\\1_\\\\2\",names(aux2))\n\n  aux21 <- subset(aux2, select = grep(\"mean\", names(aux2)))\n  names(aux21) <- c(\"X\",\"Y\",\"Z\")\n  left$Measure<-\"mean\"\n  aux21 <- cbind(left, aux21)\n\n  aux22 <- subset(aux2, select = grep(\"std\", names(aux2)))\n  names(aux22) <- c(\"X\",\"Y\",\"Z\")\n  left$Measure<-\"std\"\n  aux22 <- cbind(left, aux22)\n\n  df <- rbind(aux11,aux12, aux21, aux22)\n  return (df)\n\n}\n",
    "created" : 1491211423820.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1577254398",
    "id" : "D5D35428",
    "lastKnownWriteTime" : 1491237276,
    "last_content_update" : 1491237276,
    "path" : "P:/R/DataScience/JGGTidy/./R/loadFiles.R",
    "project_path" : "./R/loadFiles.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}